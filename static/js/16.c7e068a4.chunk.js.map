{"version":3,"sources":["modules/product/components/ManageProduct/UploadAvatarDynamic.js","modules/product/components/ManageProduct/UpdateProductModal.js","modules/product/components/ManageProduct/CreateProductModal.js","themes/product/pages/Home/index.tsx","i18n.enum.ts","common/utils/storage.util.ts","modules/messages/message.enum.ts","modules/messages/message.constants.ts","common/sevices/index.ts","common/utils/apis.util.ts","modules/product/product.store.ts","modules/product/product.service.ts"],"names":["UploadAvatarDynamic","record","React","useContext","ProductStoreContext","useState","PhotoURL","imageUrl","setImageUrl","console","log","useEffect","fileList","setFileList","onChange","a","newFile","file","newFileList","status","String","response","filename","refetch","onPreview","src","url","Promise","resolve","reader","FileReader","readAsDataURL","originFileObj","onload","result","image","Image","window","open","document","write","outerHTML","beforeCrop","Id","isJpgOrPng","type","message","error","isLt2M","size","rotate","action","length","shape","style","padding","formItemLayout","labelCol","xs","span","sm","wrapperCol","CollectionCreateForm","visible","onCreate","onCancel","Form","useForm","form","Discontinued","switchState","setSwitchState","title","okText","cancelText","onOk","validateFields","then","values","resetFields","catch","info","name","onFinish","initialValues","ProductName","CategoryId","QuantityPerUnit","UnitPrice","UnitsInStock","ReorderLevel","prefix","scrollToFirstError","Item","label","disabled","placeholder","rules","required","hasFeedback","checkedChildren","unCheckedChildren","checked","UpdateProductModal","pros","productStore","setVisible","updateProducts","EditOutlined","onClick","Select","Option","AutoComplete","CreateProductModal","createProducts","background","border","className","confirm","Modal","observer","loading","setLoading","products","setProducts","total","setTotal","PageNo","PageSize","pagination","setPagination","getProducts","totalCount","pageNum","pageSize","initfunc","toggleRefetch","autorun","pageNumber","changePage","showPromiseConfirm","row","icon","ExclamationCircleOutlined","content","deleteProduct","columns","dataIndex","sorter","key","render","val","color","_","DeleteOutlined","TabPane","Tabs","Meta","Card","defaultActiveKey","tab","spinning","dataSource","rowKey","grid","gutter","md","lg","xl","xxl","renderItem","product","width","marginTop","actions","avatar","active","description","offset","showQuickJumper","defaultCurrent","showTotal","defaultPageSize","I18N","saveToStorage","value","localStorage","removeItem","setItem","removeFromStorage","MESSAGE_TYPE","ERRORS","Errors","DELETE_SUCCESS","MESSAGES_DELETE_SUCCESS","UPDATE_SUCCESS","MESSAGES_UPDATE_SUCCESS","CREATED_SUCCESS","MESSAGES_CREATED_SUCCESS","LOGIN_FAIL","axiosInstance","axios","create","baseURL","headers","Accept","interceptors","request","use","config","getItem","common","res","toast","dismiss","handleResponseError","data","detailError","messageDetail","messageCode","location","pathname","includes","replace","Array","isArray","errorCode","find","reject","removeConfirmationFields","object","keysWithConfirmation","Object","keys","filter","excludedFiltered","map","ProductStore","this","skip","take","productService","searchProductsPagination","searchKey","items","meta","totalItems","createProduct","id","updateProduct","page","trim","deleteProducts","currentPage","itemCount","observable","createContext","ProductService","productPrefix","http","get","post","put","params","limit","delete"],"mappings":"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","file":"static/js/16.c7e068a4.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Upload, Button, Avatar, message } from \"antd\";\r\nimport ImgCrop from \"antd-img-crop\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport { ProductStoreContext } from \"../../product.store\";\r\nimport productService from '../../../../modules/product/product.service';\r\n\r\n// const token = checkToken();\r\n\r\nconst UploadAvatarDynamic = (record) => {\r\n        const productStore = React.useContext(ProductStoreContext);\r\n        const [imageUrl, setImageUrl] = React.useState(\r\n            record.record.PhotoURL\r\n        );\r\n        console.log(record.record.PhotoURL);\r\n        useEffect(() => {\r\n\r\n        }, [imageUrl]);\r\n\r\n        const [fileList, setFileList] = useState([\r\n            // {\r\n            //   uid: '-1',\r\n            //   name: 'image.png',\r\n            //   status: 'done',\r\n            //   url: 'https://cdn2.iconfinder.com/data/icons/product-packaging-color-line/48/product_packaging_pixel_perfect_color_line_icons_2-cardboard-512.png',\r\n            // },\r\n        ]);\r\n        // const sleep = (milliseconds) => {\r\n        //   return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n        // };\r\n        const onChange = async({ file: newFile, fileList: newFileList }) => {\r\n            // const newdata = await productService.getOneProduct(id.id);\r\n            // console.log(\"data\");\r\n            // console.log(newdata)\r\n            console.log(\"new file list\");\r\n            console.log(newFileList);\r\n            setFileList(newFileList);\r\n            console.log(newFile)\r\n            if (newFile.status === 'done') {\r\n                setImageUrl(\"http://127.0.0.1:4000/api/products/img/\" + String(newFile.response.filename));\r\n\r\n                console.log(\"http://127.0.0.1:4000/api/products/img/\" + String(newFile.response.filename));\r\n                await record.refetch();\r\n            }\r\n\r\n            // pross.onsub();\r\n            // getAccountDetailApi()\r\n            //   .then((res) => {\r\n            //     dispatch(setua({ username: username, avatar: res.data.AvatarPath }));\r\n            //     if (res.status === 200) {\r\n            //       message.success(res.statusText);\r\n            //     } else {\r\n            //       message.error(res.statusText);\r\n            //     }\r\n            //   })\r\n            //   .catch((error) => {\r\n            //     message.error(error.data.message);\r\n            //   });\r\n        };\r\n\r\n        const onPreview = async(file) => {\r\n            let src = file.url;\r\n            if (!src) {\r\n                src = await new Promise((resolve) => {\r\n                    const reader = new FileReader();\r\n                    reader.readAsDataURL(file.originFileObj);\r\n                    reader.onload = () => resolve(reader.result);\r\n                });\r\n            }\r\n            const image = new Image();\r\n            image.src = src;\r\n            const imgWindow = window.open(src);\r\n            imgWindow.document.write(image.outerHTML);\r\n        };\r\n\r\n        function beforeUpload(file) {\r\n            console.log(\"current id\");\r\n            console.log(record.record.Id)\r\n            const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\r\n            if (!isJpgOrPng) {\r\n                message.error('You can only upload JPG/PNG file!');\r\n            }\r\n            const isLt2M = file.size / 1024 / 1024 < 10;\r\n            if (!isLt2M) {\r\n                message.error('Image must smaller than 10MB!');\r\n            }\r\n            return isJpgOrPng && isLt2M;\r\n        }\r\n\r\n        return ( <\r\n                ImgCrop beforeCrop = { beforeUpload }\r\n                rotate >\r\n                <\r\n                Upload action = { \"http://127.0.0.1:4000/\" + \"api/products/avatar/\" + record.record.Id }\r\n                // headers={{ Authorization: `Bearer ${token}` }}\r\n                // listType=\"picture-card\"\r\n                fileList = { fileList }\r\n                onChange = { onChange }\r\n                onPreview = { onPreview } >\r\n                {\r\n                    fileList.length < 1 && ( < Avatar shape = \"square\"\r\n                        size = { 150 }\r\n                        style = {\r\n                            { padding: 0 } }\r\n                        src = { \"http://127.0.0.1:4000/api/products/img/\" + String(imageUrl) }\r\n                        />)} <\r\n                        /Upload> <\r\n                        /ImgCrop>\r\n                    );\r\n                };\r\n\r\n                export default UploadAvatarDynamic;","import React, { useState } from \"react\";\r\n// import { Button, Modal, Form, Input, Radio } from \"antd\";\r\n// import CreateUserForm from \"./CreateUserForm\";\r\nimport \"antd/dist/antd.css\";\r\n// import './style.css';\r\nimport {\r\n    Form,\r\n    Input,\r\n    Tooltip,\r\n    Cascader,\r\n    Select,\r\n    Row,\r\n    Col,\r\n    Checkbox,\r\n    Button,\r\n    AutoComplete,\r\n    Radio,\r\n    Modal,\r\n    InputNumber,\r\n    Switch,\r\n} from \"antd\";\r\nimport { ExclamationCircleOutlined, AudioOutlined, EditOutlined, EllipsisOutlined, SettingOutlined } from \"@ant-design/icons\";\r\nimport { ProductStoreContext } from \"../../product.store\";\r\nimport UploadAvatarDynamic from \"./UploadAvatarDynamic\";\r\nimport LazyLoad from 'react-lazyload'\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        xs: {\r\n            span: 24,\r\n        },\r\n        sm: {\r\n            span: 8,\r\n        },\r\n    },\r\n    wrapperCol: {\r\n        xs: {\r\n            span: 24,\r\n        },\r\n        sm: {\r\n            span: 16,\r\n        },\r\n    },\r\n};\r\n\r\nconst CollectionCreateForm = ({ visible, onCreate, onCancel, record, refetch }) => {\r\n    const [form] = Form.useForm();\r\n    const [switchState, setSwitchState] = React.useState(record.Discontinued);\r\n    const onFinish = (values) => {\r\n        console.log(\"Received values of form: \", values);\r\n    };\r\n    function onChange(checked) {\r\n        console.log(`switch to ${checked}`);\r\n        setSwitchState(checked);\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n\r\n            visible={visible}\r\n            title=\"Update product\"\r\n            okText=\"Update\"\r\n            cancelText=\"Cancel\"\r\n            onCancel={onCancel}\r\n            onOk={() => {\r\n                form\r\n                    .validateFields()\r\n                    .then((values) => {\r\n                        console.log(\"validate success\")\r\n                        form.resetFields();\r\n                        onCreate(values);\r\n                    })\r\n                    .catch((info) => {\r\n                        console.log(\"Validate Failed:\", info);\r\n                    });\r\n            }}\r\n        >\r\n\r\n            <Form\r\n                {...formItemLayout}\r\n                form={form}\r\n                name=\"register\"\r\n                onFinish={onFinish}\r\n                initialValues={{\r\n                    Id: record.Id,\r\n                    ProductName: record.ProductName,\r\n                    CategoryId: record.CategoryId,\r\n                    QuantityPerUnit: record.QuantityPerUnit,\r\n                    UnitPrice: record.UnitPrice,\r\n                    UnitsInStock: record.UnitsInStock,\r\n                    ReorderLevel: record.ReorderLevel,\r\n                    Discontinued: record.Discontinued,\r\n                    prefix: \"86\",\r\n                }}\r\n                scrollToFirstError\r\n            >\r\n                <Form.Item\r\n                    name=\"Id\"\r\n                    label=\"Id\"\r\n                >\r\n                    <InputNumber disabled={true} placeholder=\"Id\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"Image\"\r\n                    label=\"Image\"\r\n                >\r\n                    <UploadAvatarDynamic record={record} refetch={refetch} />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"ProductName\"\r\n                    label=\"Product Name\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input the product name!',\r\n                        },\r\n                    ]}\r\n                    hasFeedback\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"CategoryId\"\r\n                    label=\"Category Id\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input the category id!',\r\n                        },\r\n                    ]}\r\n                    hasFeedback\r\n                >\r\n                    <InputNumber />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"QuantityPerUnit\"\r\n                    label=\"Quantity Per Unit\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'This is a required field!',\r\n                        },\r\n                    ]}\r\n                    hasFeedback\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"UnitPrice\"\r\n                    label=\"Unit Price\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'This is a required field!',\r\n                        },\r\n                    ]}\r\n                    hasFeedback\r\n                >\r\n                    <InputNumber />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"UnitsInStock\"\r\n                    label=\"Units In Stock\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'This is a required field!',\r\n                        },\r\n                    ]}\r\n                    hasFeedback\r\n                >\r\n                    <InputNumber />\r\n                </Form.Item>\r\n\r\n\r\n                <Form.Item\r\n                    name=\"ReorderLevel\"\r\n                    label=\"Reorder Level\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'This is a required field!',\r\n                        },\r\n                    ]}\r\n                    hasFeedback\r\n                >\r\n                    <InputNumber />\r\n                </Form.Item>\r\n\r\n                <Form.Item name=\"Discontinued\"\r\n                    label=\"Discontinued\">\r\n                    <Switch\r\n                        checkedChildren=\"Out Of Stock\"\r\n                        unCheckedChildren=\"In Stock\"\r\n                        checked={switchState}\r\n                        onChange={onChange}\r\n                    />\r\n                </Form.Item>\r\n            </Form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nconst UpdateProductModal = (pros) => {\r\n    const productStore = React.useContext(ProductStoreContext);\r\n    console.log(\"now record\")\r\n    console.log(pros.record);\r\n    if (!pros.record.PhotoURL) {\r\n        pros.record[\"PhotoURL\"] = \"default.png\";\r\n    }\r\n    console.log(pros.record);\r\n    const [visible, setVisible] = useState(false);\r\n\r\n    const onCreate = async (values) => {\r\n        setVisible(false);\r\n        console.log(\"Received values of form: \", values);\r\n        // insertUsersApi(values);\r\n        console.log(productStore.refetch);\r\n        await productStore.updateProducts(values.Id, values);\r\n        // await productStore.toggleRefetch();\r\n        await pros.refetch();\r\n        console.log(productStore.refetch);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n\r\n            {/* <Button\r\n                style={{ background: \"#fab91a\", border: \"none\", \"border-radius\": \"4px\" }}\r\n                className=\"p-2 h-100\"\r\n                type=\"primary\"\r\n                onClick={() => {\r\n                    setVisible(true);\r\n                }}\r\n            >\r\n                Update\r\n      </Button> */}\r\n            <EditOutlined onClick={() => {\r\n                setVisible(true);\r\n            }} />\r\n            <LazyLoad>\r\n                <CollectionCreateForm\r\n                    visible={visible}\r\n                    onCreate={onCreate}\r\n                    onCancel={() => {\r\n                        setVisible(false);\r\n                    }}\r\n                    record={pros.record}\r\n                    refetch={pros.refetch}\r\n                />\r\n            </LazyLoad>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UpdateProductModal;\r\n","import React, { useState } from \"react\";\r\n// import { Button, Modal, Form, Input, Radio } from \"antd\";\r\n// import { insertUsersApi } from \"../../api/user\";\r\n// import CreateUserForm from \"./CreateUserForm\";\r\nimport \"antd/dist/antd.css\";\r\nimport './style.css';\r\nimport {\r\n    Form,\r\n    Input,\r\n    Tooltip,\r\n    Cascader,\r\n    Select,\r\n    Row,\r\n    Col,\r\n    Checkbox,\r\n    Button,\r\n    AutoComplete,\r\n    Radio,\r\n    Modal,\r\n    InputNumber,\r\n    Switch,\r\n} from \"antd\";\r\nimport { QuestionCircleOutlined } from \"@ant-design/icons\";\r\nimport { ProductStoreContext } from \"../../product.store\";\r\nconst { Option } = Select;\r\nconst AutoCompleteOption = AutoComplete.Option;\r\n\r\nconst roles = [\r\n    {\r\n        value: \"admin\",\r\n        label: \"admin\",\r\n    },\r\n    {\r\n        value: \"normal-user\",\r\n        label: \"normal-user\",\r\n    },\r\n    {\r\n        value: \"contact-point\",\r\n        label: \"contact-point\",\r\n    },\r\n    {\r\n        value: \"dc-member\",\r\n        label: \"dc-member\",\r\n    },\r\n];\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        xs: {\r\n            span: 24,\r\n        },\r\n        sm: {\r\n            span: 8,\r\n        },\r\n    },\r\n    wrapperCol: {\r\n        xs: {\r\n            span: 24,\r\n        },\r\n        sm: {\r\n            span: 16,\r\n        },\r\n    },\r\n};\r\n\r\nconst CollectionCreateForm = ({ visible, onCreate, onCancel }) => {\r\n    const [form] = Form.useForm();\r\n    const onFinish = (values) => {\r\n        console.log(\"Received values of form: \", values);\r\n    };\r\n    const [switchState, setSwitchState] = React.useState(false);\r\n    function onChange(checked) {\r\n        console.log(`switch to ${checked}`);\r\n        setSwitchState(checked);\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            style={{ \"border-radius\": \"25px\" }}\r\n            visible={visible}\r\n            title=\"Create a new collection\"\r\n            okText=\"Create\"\r\n            cancelText=\"Cancel\"\r\n            onCancel={onCancel}\r\n            onOk={() => {\r\n                form\r\n                    .validateFields()\r\n                    .then((values) => {\r\n                        form.resetFields();\r\n                        onCreate(values);\r\n                    })\r\n                    .catch((info) => {\r\n                        console.log(\"Validate Failed:\", info);\r\n                    });\r\n            }}\r\n        >\r\n            <Form\r\n                {...formItemLayout}\r\n                form={form}\r\n                name=\"register\"\r\n                onFinish={onFinish}\r\n                initialValues={{\r\n                    ProductName: \"new product\",\r\n                    CategoryId: 1,\r\n                    QuantityPerUnit: \"1kg per item\",\r\n                    UnitPrice: 1,\r\n                    UnitsInStock: 1,\r\n                    ReorderLevel: 1,\r\n                    Discontinued: false,\r\n                    prefix: \"86\",\r\n                }}\r\n                scrollToFirstError\r\n            >\r\n                <Form.Item\r\n                    name=\"ProductName\"\r\n                    label=\"Product Name\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input the product name!',\r\n                        },\r\n                    ]}\r\n                    hasFeedback\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"CategoryId\"\r\n                    label=\"Category Id\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input the category id!',\r\n                        },\r\n                    ]}\r\n                    hasFeedback\r\n                >\r\n                    <InputNumber />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"QuantityPerUnit\"\r\n                    label=\"Quantity Per Unit\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'This is a required field!',\r\n                        },\r\n                    ]}\r\n                    hasFeedback\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"UnitPrice\"\r\n                    label=\"Unit Price\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'This is a required field!',\r\n                        },\r\n                    ]}\r\n                    hasFeedback\r\n                >\r\n                    <InputNumber />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"UnitsInStock\"\r\n                    label=\"Units In Stock\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'This is a required field!',\r\n                        },\r\n                    ]}\r\n                    hasFeedback\r\n                >\r\n                    <InputNumber />\r\n                </Form.Item>\r\n\r\n\r\n                <Form.Item\r\n                    name=\"ReorderLevel\"\r\n                    label=\"Reorder Level\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'This is a required field!',\r\n                        },\r\n                    ]}\r\n                    hasFeedback\r\n                >\r\n                    <InputNumber />\r\n                </Form.Item>\r\n\r\n                <Form.Item name=\"Discontinued\"\r\n                    label=\"Discontinued\">\r\n                    <Switch\r\n                        checkedChildren=\"Out Of Stock\"\r\n                        unCheckedChildren=\"In Stock\"\r\n                        checked={switchState}\r\n                        onChange={onChange}\r\n                    />\r\n                </Form.Item>\r\n            </Form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nconst CreateProductModal = (pros) => {\r\n    const productStore = React.useContext(ProductStoreContext);\r\n    const [visible, setVisible] = useState(false);\r\n\r\n    const onCreate = async (values) => {\r\n        console.log(\"Received values of form: \", values);\r\n        // insertUsersApi(values);\r\n        await productStore.createProducts(values);\r\n        await pros.refetch();\r\n        setVisible(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                type=\"primary\"\r\n                style={{ background: \"#fab91a\", border: \"none\", \"border-radius\": \"10px\" }}\r\n                className=\"p-2 h-100\"\r\n                onClick={() => {\r\n                    setVisible(true);\r\n                }}\r\n            >\r\n                Create New Product\r\n      </Button>\r\n            <CollectionCreateForm\r\n                visible={visible}\r\n                onCreate={onCreate}\r\n                onCancel={() => {\r\n                    setVisible(false);\r\n                }}\r\n            />\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default CreateProductModal;\r\n","import { observer } from \"mobx-react\";\r\nimport React from \"react\";\r\nimport { ProductStoreContext } from \"../../../../modules/product/product.store\";\r\nimport { Row, Modal, Col, Button, Pagination, Table, Tag, Radio, Space, Tabs, Card, Skeleton, Avatar, List, Spin } from 'antd';\r\nimport { ExclamationCircleOutlined, AudioOutlined, EditOutlined, EllipsisOutlined, SettingOutlined, DeleteOutlined } from \"@ant-design/icons\";\r\nimport { ColumnsType } from \"antd/es/table\";\r\nimport \"antd/dist/antd.css\";\r\nimport UpdateProductModal from \"../../../../modules/product/components/ManageProduct/UpdateProductModal\";\r\nimport CreateProductModal from \"../../../../modules/product/components/ManageProduct/CreateProductModal\";\r\nimport { makeAutoObservable, autorun, observable } from \"mobx\"\r\n\r\ninterface Product {\r\n  Id: number;\r\n  ProductName: string;\r\n  CategoryId: number;\r\n  QuantityPerUnit: string;\r\n  UnitPrice: number;\r\n  UnitsInStock: number;\r\n  ReorderLevel: number;\r\n  Discontinued: boolean;\r\n}\r\n\r\nconst { confirm } = Modal;\r\n\r\n\r\n\r\nconst HomePage = () => {\r\n  const productStore = React.useContext(ProductStoreContext);\r\n  const [loading, setLoading] = React.useState<boolean>(false);\r\n  const [products, setProducts] = React.useState<any[]>([]);\r\n  const [total, setTotal] = React.useState<number>();\r\n  const [pagination, setPagination] = React.useState<any>({ PageNo: 1, PageSize: 10 });\r\n  productStore.getProducts(pagination.PageNo, pagination.PageSize);\r\n  const getProducts = async () => {\r\n    setLoading(true);\r\n    console.log(\"abc\");\r\n    // await productStore.getProducts(pagination.PageNo, pagination.PageSize);\r\n    setProducts(productStore.products);\r\n    console.log(products)\r\n    setTotal(productStore.totalCount);\r\n    setPagination({ PageNo: productStore.pageNum, PageSize: productStore.pageSize });\r\n    setLoading(false);\r\n  };\r\n  const initfunc = async () => {\r\n    setLoading(true);\r\n    console.log(\"xyz\");\r\n    await productStore.getProducts(pagination.PageNo, pagination.PageSize);\r\n    setProducts(productStore.products);\r\n    setTotal(productStore.totalCount);\r\n    setPagination({ PageNo: productStore.pageNum, PageSize: productStore.pageSize });\r\n    setLoading(false);\r\n  }\r\n  const refetch = async () => {\r\n    await initfunc();\r\n    await productStore.toggleRefetch();\r\n  }\r\n  React.useEffect(() => {\r\n    initfunc();\r\n  }, [productStore, productStore.refetch]);\r\n  React.useEffect(() => autorun(() => {\r\n    // autorun(() => {\r\n    //   console.log(\"Energy level:\", productStore.products)\r\n    // })\r\n    getProducts();\r\n  }), []);\r\n\r\n\r\n\r\n  // const getProducts = async () => {\r\n  //   await productStore.getProducts(pagination.PageNo, pagination.PageSize);\r\n  //   setProducts(productStore.products);\r\n  //   setTotal(productStore.totalCount);\r\n  //   setPagination({ PageNo: productStore.pageNum, PageSize: productStore.pageSize });\r\n  // };\r\n\r\n  // React.useEffect(\r\n  //   () =>\r\n  //     autorun(() => getProducts()),\r\n  //   [], // note empty dependencies\r\n  // )\r\n\r\n  const showTotal = (total: number) => {\r\n    return `Total ${total} items`;\r\n  }\r\n\r\n  const onChange = async (pageNumber: number, pageSize: any) => {\r\n    setLoading(true);\r\n    console.log(\"Page: \", pageNumber);\r\n    console.log(\"PageSize: \", pageSize);\r\n    console.log(\"PreviousPageSize: \", pagination.PageSize);\r\n    if (pageNumber == 0 || pageSize != pagination.PageSize) pageNumber = 1;\r\n    console.log(\"Page: \", pageNumber);\r\n    await productStore.changePage(pageNumber, pageSize);\r\n    setProducts(productStore.products);\r\n    setTotal(productStore.totalCount);\r\n    setPagination({ PageNo: productStore.pageNum, PageSize: productStore.pageSize });\r\n    setLoading(false);\r\n  }\r\n\r\n  const showPromiseConfirm = async (row: any) => {\r\n    confirm({\r\n      title: \"Do you want to delete product \" + row.ProductName,\r\n      icon: <ExclamationCircleOutlined />,\r\n      content: \"Warning: The delete product cannot be recover\",\r\n      async onOk() {\r\n        setLoading(true)\r\n        await productStore.deleteProduct(row.Id);\r\n        await productStore.toggleRefetch();\r\n        // return new Promise((resolve, reject) => {\r\n        //   setProducts(productStore.products);\r\n        //   setTimeout(Math.random() > 0.5 ? resolve : reject, 2000);\r\n        // }).catch(() => console.log(\"opps error\"));\r\n        setProducts(productStore.products);\r\n        setLoading(false)\r\n      },\r\n      onCancel() { },\r\n    });\r\n  }\r\n\r\n  const columns: ColumnsType<Product> = [\r\n    {\r\n      title: \"ProductName\",\r\n      dataIndex: \"ProductName\",\r\n      sorter: false,\r\n    },\r\n    {\r\n      title: \"CategoryId\",\r\n      dataIndex: \"CategoryId\",\r\n      sorter: false,\r\n    },\r\n    {\r\n      title: \"QuantityPerUnit\",\r\n      dataIndex: \"QuantityPerUnit\",\r\n      sorter: false,\r\n    },\r\n    {\r\n      title: \"UnitPrice\",\r\n      dataIndex: \"UnitPrice\",\r\n      sorter: false,\r\n    },\r\n    {\r\n      title: \"UnitsInStock\",\r\n      dataIndex: \"UnitsInStock\",\r\n      sorter: false,\r\n    },\r\n    {\r\n      title: \"ReorderLevel\",\r\n      dataIndex: \"ReorderLevel\",\r\n      sorter: false,\r\n    },\r\n    {\r\n      title: \"Discontinued\",\r\n      dataIndex: \"Discontinued\",\r\n      key: \"Discontinued\",\r\n      render: (val) =>\r\n        (!val) ? <Tag color=\"green\">In stock</Tag> : <Tag color=\"red\">Out of stock</Tag>,\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      key: \"action\",\r\n      render: (_, record) => (\r\n        <Space size=\"middle\">\r\n          <UpdateProductModal record={record} refetch={refetch} />\r\n          <DeleteOutlined onClick={() => showPromiseConfirm(record)} />\r\n          {/* <Button\r\n            style={{}}\r\n            className=\"p-2 h-100\"\r\n            type=\"primary\"\r\n            danger\r\n            onClick={() => showPromiseConfirm(record)}\r\n          >\r\n            Delete\r\n          </Button> */}\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  // getProducts();\r\n  const initf = () => { productStore.getProducts(pagination.PageNo, pagination.PageSize); };\r\n\r\n  const callback = (key: any) => {\r\n    console.log(key);\r\n  }\r\n\r\n  const { TabPane } = Tabs;\r\n  const { Meta } = Card;\r\n  const gridStyle = {\r\n    width: '50%',\r\n    border: \"none\",\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <div style={{ background: \"white\" }}>\r\n        {console.log(products)}\r\n        {/* <Row style={{ marginLeft: '10px' }}>Home Page</Row>\r\n        <Row style={{ marginLeft: '10px' }}>Test products</Row> */}\r\n        <br />\r\n        <CreateProductModal refetch={refetch} />\r\n        <br />\r\n        <Tabs defaultActiveKey=\"1\" onChange={callback}>\r\n          <TabPane tab=\"Table\" key=\"1\">\r\n            <Spin spinning={loading}>\r\n              <Table<Product> columns={columns} dataSource={products} rowKey={(record) => record.Id} pagination={false} />\r\n            </Spin>\r\n          </TabPane>\r\n          <TabPane tab=\"Cards\" key=\"2\">\r\n            <Spin spinning={loading}>\r\n              <List\r\n                grid={{\r\n                  gutter: 16,\r\n                  xs: 1,\r\n                  sm: 2,\r\n                  md: 2,\r\n                  lg: 2,\r\n                  xl: 3,\r\n                  xxl: 4,\r\n                }}\r\n                dataSource={products}\r\n                renderItem={product => (\r\n                  <List.Item>\r\n                    <Card\r\n                      style={{ width: 300, marginTop: 16 }}\r\n                      actions={[\r\n                        <UpdateProductModal record={product} refetch={refetch} />,\r\n                        <DeleteOutlined onClick={() => showPromiseConfirm(product)} />\r\n                      ]}\r\n                    >\r\n\r\n                      <Skeleton loading={false} avatar active>\r\n                        <Meta\r\n                          avatar={\r\n                            <Avatar shape=\"square\" size={64} src={\"http://127.0.0.1:4000/api/products/img/thumbnails-\" + String(product.PhotoURL ? product.PhotoURL : \"default.png\")} />\r\n                          }\r\n                          title={product.ProductName}\r\n                          description={!product.Discontinued ? <Tag color=\"green\">In stock</Tag> : <Tag color=\"red\">Out of stock</Tag>}\r\n                        />\r\n                        <p>{product.QuantityPerUnit}</p>\r\n                        {/* <Card.Grid hoverable={false} style={gridStyle}>\r\n                        {product.QuantityPerUnit}\r\n                      </Card.Grid> */}\r\n                        {/* <Card.Grid style={gridStyle}>Content</Card.Grid>\r\n                      <Card.Grid style={gridStyle}>Content</Card.Grid>\r\n                      <Card.Grid style={gridStyle}>Content</Card.Grid>\r\n                      <Card.Grid style={gridStyle}>Content</Card.Grid> */}\r\n                      </Skeleton>\r\n\r\n                    </Card>\r\n                  </List.Item>\r\n                )}\r\n              />,\r\n              </Spin>\r\n          </TabPane>\r\n        </Tabs>\r\n        <br />\r\n        <Row>\r\n          <Col span={18} offset={6}>\r\n            <Pagination\r\n              showQuickJumper\r\n              defaultCurrent={1}\r\n              total={total}\r\n              showTotal={showTotal}\r\n              defaultPageSize={10}\r\n              onChange={onChange}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default observer(HomePage);\r\n","export enum I18N {\r\n    LOGIN_FAIL = 'Login Fail. Wrong email or password. Please try again',\r\n    VALIDATE_EMAIL = 'Please enter a valid email address (Ex: johndoe@domain.com)',\r\n    VALIDATE_REQUIRED = 'This is a required field',\r\n    VALIDATE_PHONE = 'Phone number is not valid',\r\n    VALIDATE_CONFIRM_PASSWORD = 'Please enter the same value',\r\n    ADMIN_NEW_ACCOUNT = 'New Account',\r\n    ADMIN_EDIT_ACCOUNT = 'Edit Account',\r\n    ADMIN_MANAGE_ACCOUNT = 'Manage Accounts',\r\n    ADMIN_MANAGE_PRODUCT = 'Manage Products',\r\n    ACCOUNT_CREATE_TITLE = 'Sign up',\r\n    ACCOUNT_CONFIRM_PASSWORD = 'Confirm Password',\r\n    ACCOUNT_PHONE_REQUIRED = 'Phone number',\r\n    PLACEHOLDER_PHONE = 'Ex: 09xxxxxxxx',\r\n    ACCOUNT_FNAME = 'First name',\r\n    ACCOUNT_LNAME = 'Last name',\r\n    ACCOUNT_PHONE = 'Phone number',\r\n    ACCOUNT_ROLE_LABEL = 'Account type',\r\n    MODAL_CONFIRM = 'Confirmation',\r\n    BUTTONS_OK = 'Ok',\r\n    BUTTONS_CANCEL = 'Cancel',\r\n    BUTTONS_CREATE = 'Create',\r\n    BUTTONS_DELETE = 'Delete',\r\n    BUTTONS_UPDATE = 'Update',\r\n    BUTTONS_LOGIN = 'Login',\r\n    BUTTONS_SIGNUP = 'Signup',\r\n    BUTTONS_ADD_NEW = 'New',\r\n    BUTTONS_RESTORE = 'Restore',\r\n    PLACEHOLDER_EMAIL = 'Please enter your email here',\r\n    PLACEHOLDER_PASSWORD = 'Please enter your pass word here',\r\n    PLACEHOLDER_CONFIRM_PASSWORD = 'Confirm password',\r\n    ACCOUNT_LOGIN_WELCOME = 'Welcome',\r\n    ACCOUNT_EMAIL = 'Email',\r\n    ACCOUNT_PASSWORD = 'Password',\r\n    ACCOUNT_LINK_FORGOTPASSWORD = 'Forgot password',\r\n    PAGING_FIRST = 'First',\r\n    PAGING_LAST = 'Last',\r\n    PAGING_NEXT = 'Next',\r\n    PAGING_PREV = 'Prev',\r\n    PAGING_AMOUNT = 'record(s) found',\r\n    PAGING_PER_PAGE = 'per page',\r\n    MESSAGES_DELETE_SUCCESS = 'Deleted successfully',\r\n    MESSAGES_VERIFY_SUCCESS = 'Verified successfully',\r\n    MESSAGES_UPDATE_SUCCESS = 'Updated successfully',\r\n    MESSAGES_CREATED_SUCCESS = 'Created successfully',\r\n    ADMIN_MENU_LOG_OUT = 'Log out',\r\n}\r\n","/*\r\n * store an item to local storage\r\n *\r\n * @param string key\r\n * @param any value\r\n * @return void\r\n */\r\nexport const saveToStorage = (key: string, value: string) => {\r\n  localStorage.removeItem(key);\r\n  localStorage.setItem(key, value);\r\n};\r\n\r\n/*\r\n * remove an item out of local storage\r\n *\r\n * @param string key\r\n * @return void\r\n */\r\nexport const removeFromStorage = (key: string) => {\r\n  localStorage.removeItem(key);\r\n};\r\n\r\n/*\r\n * retrieve an item from local storage\r\n *\r\n * @param string key\r\n * @return any\r\n */\r\nexport const retrieveFromStorage = (key: string) => {\r\n  return localStorage.getItem(key);\r\n};\r\n\r\n/*\r\n * store an item to session storage\r\n *\r\n * @param string key\r\n * @param any value\r\n * @return void\r\n */\r\nexport const saveToSession = (key: string, value: any) => {\r\n  sessionStorage.removeItem(key);\r\n  sessionStorage.setItem(key, value);\r\n};\r\n\r\n/*\r\n * remove an item out of session storage\r\n *\r\n * @param string key\r\n * @return void\r\n */\r\nexport const removeFromSession = (key: string) => {\r\n  sessionStorage.removeItem(key);\r\n};\r\n\r\n/*\r\n * retrieve an item from session storage\r\n *\r\n * @param string key\r\n * @return any\r\n */\r\nexport const retrieveFromSession = (key: string) => {\r\n  return sessionStorage.getItem(key);\r\n};\r\n","export enum MESSAGE_TYPE {\r\n  PRIMARY = 'primary',\r\n  SECONDARY = 'secondary',\r\n  SUCCESS = 'success',\r\n  DANGER = 'danger',\r\n  WARNING = 'warning',\r\n  INFO = 'info',\r\n  LIGHT = 'light',\r\n  DARK = 'dark',\r\n}\r\n\r\nexport enum ERRORS {\r\n  SELECTED_ITEMS = 'SELECTED_ITEMS',\r\n  FORGOT_SUCCESS = 'FORGOT_SUCCESS',\r\n  CONFIRM_DELETE = 'CONFIRM_DELETE',\r\n  CONFIRM_CANCEL = 'CONFIRM_CANCEL',\r\n  DELETE_SUCCESS = 'DELETE_SUCCESS',\r\n  UPDATE_SUCCESS = 'UPDATE_SUCCESS',\r\n  CREATED_SUCCESS = 'CREATED_SUCCESS',\r\n  IMAGE_SIZE = 'IMAGE_SIZE',\r\n  LOGIN_FAIL = 'LOGIN_FAIL',\r\n  CREATE_ERROR = 'CREATE_ERROR',\r\n  EMAIL_EXIST = 'EMAIL_EXIST',\r\n  INVALID = 'INVALID',\r\n  NOT_FOUND = 'NOT_FOUND',\r\n  ERROR = 'ERROR',\r\n  SELF_DELETE = 'SELF_DELETE',\r\n  SUPER_ADMIN_DELETE = 'SUPER_ADMIN_DELETE',\r\n  ORDER_NOT_FOUND = 'ORDER_NOT_FOUND',\r\n  PHONE_EXIST = 'PHONE_EXIST',\r\n  EXISTED = 'EXISTED',\r\n  CREATE_ORDER_ERROR = 'CREATE_ORDER_ERROR',\r\n  NOT_ASSIGNED = 'NOT_ASSIGNED',\r\n  DELETED_ACCOUNT = 'DELETED_ACCOUNT',\r\n  KICKED_OUT = 'KICKED_OUT',\r\n  WRONG_PHONE_NUMBER_FORMAT = 'WRONG_PHONE_NUMBER_FORMAT',\r\n  PHONE_INPUT_TOO_LONG = 'PHONE_INPUT_TOO_LONG',\r\n  TAKEN = 'TAKEN',\r\n  TOKEN_ERROR = 'TOKEN_ERROR',\r\n  ORDER_PERMISSION = 'ORDER_PERMISSION',\r\n  NOT_VERIFIED = 'NOT_VERIFIED',\r\n  FOLDER_NOT_EXISTED = 'FOLDER_NOT_EXISTED',\r\n  EMAIL_NOT_VERIFY = 'EMAIL_NOT_VERIFY',\r\n  PHONE_OTP_VERIFY = 'PHONE_OTP_VERIFY',\r\n  INCORRECT_OTP = 'INCORRECT_OTP',\r\n  OTP_EXPIRED = 'OTP_EXPIRED',\r\n  PHONE_NOT_EXIST = 'PHONE_NOT_EXIST',\r\n  PICKUP_CODE_INCORRECT = 'PICKUP_CODE_INCORRECT',\r\n  ADMIN_NOT_FOUND = 'ADMIN_NOT_FOUND',\r\n  EMAIL_NOT_FOUND = 'EMAIL_NOT_FOUND',\r\n  DETAIL_REQUIRED = 'DETAIL_REQUIRED',\r\n}\r\n","import { I18N } from \"../../i18n.enum\";\r\nimport { ErrorDto } from \"./message.dto\";\r\nimport { ERRORS } from \"./message.enum\";\r\n\r\n\r\nexport const Errors: ErrorDto[] = [\r\n  {\r\n    key: ERRORS.DELETE_SUCCESS,\r\n    label: I18N.MESSAGES_DELETE_SUCCESS,\r\n  },\r\n  {\r\n    key: ERRORS.UPDATE_SUCCESS,\r\n    label: I18N.MESSAGES_UPDATE_SUCCESS,\r\n  },\r\n  {\r\n    key: ERRORS.CREATED_SUCCESS,\r\n    label: I18N.MESSAGES_CREATED_SUCCESS,\r\n  },\r\n  {\r\n    key: ERRORS.LOGIN_FAIL,\r\n    label: I18N.LOGIN_FAIL,\r\n  }\r\n];\r\n","import axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { Errors } from '../../modules/messages/message.constants';\r\nimport { handleResponseError } from '../utils/apis.util';\r\nimport { removeFromStorage } from '../utils/storage.util';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: 'http://localhost:4000/api',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    Accept: 'application/json',\r\n    'Access-Control-Allow-Origin': '*',\r\n  },\r\n});\r\n\r\naxiosInstance.interceptors.request.use((config) => {\r\n  if (!!localStorage.getItem('token')) {\r\n    config.headers.common['Authorization'] =\r\n      'Bearer ' + localStorage.getItem('token');\r\n  }\r\n  config.headers.common['Access-Control-Allow-Origin'] = '*';\r\n  return config;\r\n});\r\n\r\naxiosInstance.interceptors.response.use(\r\n  (res) => res,\r\n  (error) => {\r\n    // Remove all toasts !\r\n    toast.dismiss();\r\n\r\n    if (!error.response) {\r\n      toast.error('Unknown error happened! Please contact admin for support');\r\n      return handleResponseError(error);\r\n    }\r\n\r\n    const { data } = error.response;\r\n    const { detailError } = data;\r\n\r\n    let messageDetail = '';\r\n    let messageCode = '';\r\n\r\n    if (error.response.status === 403) {\r\n      removeFromStorage('token');\r\n      if (!window.location.pathname.includes('login'))\r\n        window.location.replace('/');\r\n    }\r\n\r\n    if (detailError) {\r\n      if (Array.isArray(detailError.message)) {\r\n        messageDetail = detailError.message[0];\r\n        messageCode = detailError?.errorCode ?? '';\r\n      } else {\r\n        messageDetail = detailError.message;\r\n        messageCode = detailError?.errorCode ?? '';\r\n      }\r\n    } else {\r\n      messageDetail = data.message;\r\n      messageCode = data?.errorCode ?? '';\r\n    }\r\n\r\n    if (messageCode !== '') {\r\n      const error = Errors.find((error) => error.key === messageCode);\r\n      if (error) toast.error((error.label));\r\n      else toast.error(messageDetail);\r\n    } else {\r\n      toast.error(messageDetail);\r\n    }\r\n    \r\n    if (error.response.status === 400) {\r\n      return data;\r\n    }\r\n\r\n    return handleResponseError(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;\r\n","export const handleResponseError = (error: any) => {\r\n  return Promise.reject(error);\r\n};\r\n\r\nexport const removeConfirmationFields = (object: any) => {\r\n  const keysWithConfirmation = Object.keys(object).filter((key) =>\r\n    key.includes('confirm')\r\n  );\r\n\r\n  const excludedFiltered = { ...object };\r\n  keysWithConfirmation.map((key) => delete excludedFiltered[key]);\r\n  return excludedFiltered;\r\n};\r\n\r\nexport const removeUnusedProps = (object: any) => {\r\n  let temp = {};\r\n  Object.keys(object).forEach((key) => {\r\n    if (object[key] !== undefined) temp = { ...temp, [key]: object[key] };\r\n  });\r\n  return temp;\r\n};\r\n","import React from 'react';\r\nimport { observable, action, makeObservable, autorun } from 'mobx';\r\nimport productService from './product.service';\r\nimport { Product } from './product.dto';\r\n\r\nclass ProductStore {\r\n    @observable products: Product[] = [];\r\n    @observable totalCount: number = 0;\r\n    @observable pageNum: number = 1;\r\n    @observable pageSize: number = 10;\r\n    @observable refetch: boolean = true;\r\n    @observable searchKey: string = '';\r\n\r\n    @action\r\n    async toggleRefetch() {\r\n        this.refetch = !this.refetch;\r\n    }\r\n\r\n    @action\r\n    async getProducts(skip: number, take: number) {\r\n        let data: any = [];\r\n        data = await productService.searchProductsPagination(skip, take, this.searchKey);\r\n        this.products = data.items;\r\n        this.totalCount = data.meta.totalItems;\r\n        // this.pageNum = data.meta.currentPage;\r\n        // this.pageSize = data.meta.itemCount;\r\n    }\r\n\r\n    @action\r\n    async createProducts(product: Product) {\r\n        await productService.createProduct(product);\r\n        let data: any = [];\r\n        data = await productService.searchProductsPagination(this.pageNum, this.pageSize, this.searchKey);\r\n        this.products = data.items;\r\n        this.totalCount = data.meta.totalItems;\r\n        // this.pageNum = data.meta.currentPage;\r\n        // this.pageSize = data.meta.itemCount;\r\n    }\r\n\r\n    @action\r\n    async updateProducts(id: number, product: Product) {\r\n        await productService.updateProduct(id, product);\r\n        let data: any = [];\r\n        data = await productService.searchProductsPagination(this.pageNum, this.pageSize, this.searchKey);\r\n        this.products = data.items;\r\n        this.totalCount = data.meta.totalItems;\r\n        // this.pageNum = data.meta.currentPage;\r\n        // this.pageSize = data.meta.itemCount;\r\n    }\r\n\r\n    @action\r\n    async changePage(page: number, pageSize: number) {\r\n        let data: any = [];\r\n        this.pageNum = page;\r\n        this.pageSize = pageSize\r\n        data = await productService.searchProductsPagination(page, this.pageSize, this.searchKey);\r\n        this.products = data.items;\r\n        this.totalCount = data.meta.totalItems;\r\n        // this.pageNum = data.meta.currentPage;\r\n        // this.pageSize = data.meta.itemCount;\r\n    }\r\n\r\n    @action\r\n    async changeSearchKey(key: string) {\r\n        let data: any = [];\r\n        this.pageNum = 1;\r\n        this.pageSize = 10;\r\n        this.searchKey = key.trim();\r\n        data = await productService.searchProductsPagination(1, 10, key);\r\n        this.products = data.items;\r\n        this.totalCount = data.meta.totalItems;\r\n        // this.pageNum = data.meta.currentPage;\r\n        // this.pageSize = data.meta.itemCount;\r\n    }\r\n\r\n    @action\r\n    async deleteProduct(Id: number) {\r\n        let data: any = [];\r\n        await productService.deleteProducts(Id);\r\n        data = await productService.searchProductsPagination(this.pageNum, this.pageSize, this.searchKey);\r\n        this.products = data.items;\r\n        this.totalCount = data.meta.totalItems;\r\n        this.pageNum = data.meta.currentPage;\r\n        this.pageSize = data.meta.itemCount;\r\n    }\r\n\r\n}\r\n\r\nexport default new ProductStore();\r\n\r\nexport const ProductStoreContext = React.createContext(new ProductStore());\r\n","import http from \"../../common/sevices\";\r\nimport { Product } from \"./product.dto\";\r\nimport { message } from 'antd';\r\n\r\nclass ProductService {\r\n  productPrefix: string = \"http://localhost:4000/api/products\";\r\n\r\n  public async getOneProduct(id: number) {\r\n    await console.log(\"is before sending\");\r\n    await console.log(id);\r\n    const result = await http.get(`${this.productPrefix}/${id}`, {\r\n\r\n    });\r\n    return result.data;\r\n  }\r\n\r\n  public async getAllProducts() {\r\n    const result = await http.get(`${this.productPrefix}/`, {\r\n\r\n    });\r\n    return result.data;\r\n  }\r\n\r\n  public async createProduct(product: Product) {\r\n    console.log(\"Value before sending\")\r\n    console.log(product);\r\n    const result = await http.post(`${this.productPrefix}/`, {\r\n      ...product,\r\n    });\r\n    return result.data;\r\n  }\r\n\r\n  public async updateProduct(id: number, product: Product) {\r\n    console.log(\"Value before sending\")\r\n    console.log(product);\r\n    const result = await http.put(`${this.productPrefix}/${id}`, {\r\n      ...product,\r\n    });\r\n    return result.data;\r\n  }\r\n\r\n  public async getProductsPagination(skip: number, take: number) {\r\n    const result = await http.get(`${this.productPrefix}/paginateProducts`, {\r\n      params: {\r\n        page: skip,\r\n        limit: take,\r\n      },\r\n    });\r\n    return result.data;\r\n  }\r\n\r\n  public async searchProductsPagination(skip: number, take: number, key: string) {\r\n    const result = await http.get(`${this.productPrefix}/searchProducts`, {\r\n      params: {\r\n        page: skip,\r\n        limit: take,\r\n        key: key,\r\n      },\r\n    });\r\n    return result.data;\r\n  }\r\n\r\n  public async deleteProducts(id: number) {\r\n    const result = await http.delete(`${this.productPrefix}/${id}`, {\r\n    });\r\n    return result.data;\r\n  }\r\n\r\n  public async getOne(id: number) {\r\n    return new Promise((resolve, reject) => {\r\n      http.get(`${this.productPrefix}/${id}`, {\r\n      }).then((res) => {\r\n        resolve(res);\r\n      })\r\n        .catch((error) => {\r\n          reject(error.response);\r\n        });;\r\n    });\r\n  }\r\n}\r\n\r\nexport default new ProductService();\r\n"],"sourceRoot":""}